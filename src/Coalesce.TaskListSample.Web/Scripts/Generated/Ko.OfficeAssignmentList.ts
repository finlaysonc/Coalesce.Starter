
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout List View Model for: OfficeAssignment
// Auto Generated by IntelliTect.Coalesce

var baseUrl = baseUrl || '';

module ListViewModels {

    // Add an enum for all methods that are static and IQueryable
    export enum OfficeAssignmentDataSources {
            Default,
        }
    export class OfficeAssignmentList extends Coalesce.BaseListViewModel<OfficeAssignmentList, ViewModels.OfficeAssignment> {
        protected modelName = "OfficeAssignment";

        protected apiController = "/OfficeAssignment";

        public modelKeyName = "instructorID";
        public dataSources = OfficeAssignmentDataSources;
        public itemClass = ViewModels.OfficeAssignment;

        public query: {
            where?: string;
            instructorID?:number;
            location?:String;
        } = null;

        // The custom code to run in order to pull the initial datasource to use for the collection that should be returned
        public listDataSource: OfficeAssignmentDataSources = OfficeAssignmentDataSources.Default;

        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<OfficeAssignmentList, ViewModels.OfficeAssignment>(Coalesce.GlobalConfiguration.listViewModel);
        public coalesceConfig = new Coalesce.ListViewModelConfiguration<OfficeAssignmentList, ViewModels.OfficeAssignment>(OfficeAssignmentList.coalesceConfig);

        // Valid values
        public instructorValidValues: KnockoutObservableArray<any> = ko.observableArray([]);
        public loadInstructorValidValues: (callback: any) => void;
    
        protected createItem = (newItem?: any, parent?: any) => new ViewModels.OfficeAssignment(newItem, parent);

        constructor() {
            super();
        }
    }

    export namespace OfficeAssignmentList {
        // Classes for use in method calls to support data binding for input for arguments
    }
}