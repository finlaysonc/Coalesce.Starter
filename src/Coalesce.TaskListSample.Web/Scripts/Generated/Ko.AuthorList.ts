
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout List View Model for: Author
// Auto Generated by IntelliTect.Coalesce

var baseUrl = baseUrl || '';

module ListViewModels {

    // Add an enum for all methods that are static and IQueryable
    export enum AuthorDataSources {
            Default,
        }
    export class AuthorList extends Coalesce.BaseListViewModel<AuthorList, ViewModels.Author> {
        protected modelName = "Author";

        protected apiController = "/Author";

        public modelKeyName = "authorId";
        public dataSources = AuthorDataSources;
        public itemClass = ViewModels.Author;

        public query: {
            where?: string;
            authorId?:number;
            lastName?:String;
        } = null;

        // The custom code to run in order to pull the initial datasource to use for the collection that should be returned
        public listDataSource: AuthorDataSources = AuthorDataSources.Default;

        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<AuthorList, ViewModels.Author>(Coalesce.GlobalConfiguration.listViewModel);
        public coalesceConfig = new Coalesce.ListViewModelConfiguration<AuthorList, ViewModels.Author>(AuthorList.coalesceConfig);

        // Valid values
    
        protected createItem = (newItem?: any, parent?: any) => new ViewModels.Author(newItem, parent);

        constructor() {
            super();
        }
    }

    export namespace AuthorList {
        // Classes for use in method calls to support data binding for input for arguments
    }
}