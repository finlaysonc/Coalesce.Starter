
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout View Model for: Enrollment
// Auto Generated by IntelliTect.Coalesce

module ViewModels {

	export class Enrollment extends Coalesce.BaseViewModel<Enrollment>
    {
        protected modelName = "Enrollment";
        protected primaryKeyName = "enrollmentId";
        protected modelDisplayName = "Enrollment";

        protected apiController = "/Enrollment";
        protected viewController = "/Enrollment";
        public dataSources = ListViewModels.EnrollmentDataSources;


        // The custom code to run in order to pull the initial datasource to use for the object that should be returned
        public dataSource: ListViewModels.EnrollmentDataSources = ListViewModels.EnrollmentDataSources.Default;

        public static coalesceConfig
            = new Coalesce.ViewModelConfiguration<Enrollment>(Coalesce.GlobalConfiguration.viewModel);
        public coalesceConfig: Coalesce.ViewModelConfiguration<Enrollment>
            = new Coalesce.ViewModelConfiguration<Enrollment>(Enrollment.coalesceConfig);
    
        // Observables
        public enrollmentId: KnockoutObservable<number> = ko.observable(null);
        public courseId: KnockoutObservable<number> = ko.observable(null);
        public studentId: KnockoutObservable<number> = ko.observable(null);
        public grade: KnockoutObservable<any> = ko.observable(null);
        // Text value for enumeration Grade
        public gradeText: KnockoutComputed<string> = ko.computed<string>(() => "");
        public course: KnockoutObservable<ViewModels.Course> = ko.observable(null);
        public student: KnockoutObservable<ViewModels.Student> = ko.observable(null);

       
        // Create computeds for display for objects
        public courseText: () => string;
        public studentText: () => string;
        

                public courseValidValues: KnockoutObservableArray<any> = ko.observableArray([]);
        public loadCourseValidValues: (callback?: any) => JQueryPromise<any>;
        public studentValidValues: KnockoutObservableArray<any> = ko.observableArray([]);
        public loadStudentValidValues: (callback?: any) => JQueryPromise<any>;
        // Pops up a stock editor for this object.
        public showCourseEditor: (callback?: any) => void;
        public showStudentEditor: (callback?: any) => void;


        public gradeValues: EnumValue[] = [ 
            { id: 0, value: 'A' },
            { id: 1, value: 'B' },
            { id: 2, value: 'C' },
            { id: 3, value: 'D' },
            { id: 4, value: 'F' },
        ];

        
        public originalData: KnockoutObservable<any> = ko.observable(null);
        
        // This method gets called during the constructor. This allows injecting new methods into the class that use the self variable.
        public init(myself: Enrollment) {};

        constructor(newItem?: any, parent?: any){
            super();
            var self = this;
            self.parent = parent;
            self.myId;
            // Call an init function that allows for proper inheritance.
            if ($.isFunction(self.init)){
                self.init(self);
            }
            
            ko.validation.init({
                grouping: {
                    deep: true,
                    live: true,
                    observable: true
                }
            });

            // SetupValidation {
			self.courseId = self.courseId.extend({ required: {params: true, message: "Course is required."} });
			self.studentId = self.studentId.extend({ required: {params: true, message: "Student is required."} });
            
            self.errors = ko.validation.group([
                self.enrollmentId,
                self.courseId,
                self.studentId,
                self.grade,
                self.course,
                self.student,
            ]);
            self.warnings = ko.validation.group([
            ]);

            // Computed Observable for edit URL
            self.editUrl = ko.computed(function() {
                return self.coalesceConfig.baseViewUrl() + self.viewController + "/CreateEdit?id=" + self.enrollmentId();
            });

            // Create computeds for display for objects
			self.courseText = ko.computed(function()
			{   // If the object exists, use the text value. Otherwise show 'None'
				if (self.course() && self.course().courseId()) {
					return self.course().courseId().toString();
				} else {
					return "None";
				}
			});
			self.studentText = ko.computed(function()
			{   // If the object exists, use the text value. Otherwise show 'None'
				if (self.student() && self.student().studentId()) {
					return self.student().studentId().toString();
				} else {
					return "None";
				}
			});


            // Load the ViewModel object from the DTO. 
            // Force: Will override the check against isLoading that is done to prevent recursion. False is default.
            // AllowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
			self.loadFromDto = function(data: any, force: boolean = false, allowCollectionDeletes: boolean = true) {
				if (!data || (!force && self.isLoading())) return;
				self.isLoading(true);
				// Set the ID 
				self.myId = data.enrollmentId;
				self.enrollmentId(data.enrollmentId);
				// Load the lists of other objects
				// Objects are loaded first so that they are available when the IDs get loaded.
				// This handles the issue with populating select lists with correct data because we now have the object.
				if (!data.course) { 
					if (data.courseId != self.courseId()) {
                        self.course(null);
                    }
                }else {
                    if (!self.course()){
					    self.course(new Course(data.course, self));
				    }else{
					    self.course().loadFromDto(data.course);
				    }
                    if (self.parent && self.parent.myId == self.course().myId && Coalesce.Utilities.getClassName(self.parent) == Coalesce.Utilities.getClassName(self.course()))
                    {
                        self.parent.loadFromDto(data.course, undefined, false);
                    }
                }
				if (!data.student) { 
					if (data.studentId != self.studentId()) {
                        self.student(null);
                    }
                }else {
                    if (!self.student()){
					    self.student(new Student(data.student, self));
				    }else{
					    self.student().loadFromDto(data.student);
				    }
                    if (self.parent && self.parent.myId == self.student().myId && Coalesce.Utilities.getClassName(self.parent) == Coalesce.Utilities.getClassName(self.student()))
                    {
                        self.parent.loadFromDto(data.student, undefined, false);
                    }
                }

				// The rest of the objects are loaded now.
				self.courseId(data.courseId);
				self.studentId(data.studentId);
				self.grade(data.grade);
                if (self.afterLoadFromDto){
                    self.afterLoadFromDto();
                }
				self.isLoading(false);
				self.isDirty(false);
                self.validate();
			};

    	    // Save the object into a DTO
			self.saveToDto = function() {
				var dto: any = {};
				dto.enrollmentId = self.enrollmentId();

				dto.courseId = self.courseId();
				if (!dto.courseId && self.course()) {
				    dto.courseId = self.course().courseId();
				}
				dto.studentId = self.studentId();
				if (!dto.studentId && self.student()) {
				    dto.studentId = self.student().studentId();
				}
    	        dto.grade = self.grade();

				return dto;
			}

            // Methods to add to child collections


            // Save on changes
            function setupSubscriptions() {
                self.courseId.subscribe(self.autoSave);
                self.studentId.subscribe(self.autoSave);
                self.grade.subscribe(self.autoSave);
                self.course.subscribe(self.autoSave);
                self.student.subscribe(self.autoSave);
            }  

            // Create variables for ListEditorApiUrls
            // Create loading function for Valid Values

            self.loadCourseValidValues = function(callback) {
                self.loadingValidValues++;
                return $.ajax({
                    method: "GET",
                    url: self.coalesceConfig.baseApiUrl() + "/Course/CustomList?Fields=CourseId,CourseId",
                    xhrFields: { withCredentials: true } })
                .done(function(data) {
                    self.isLoading(true);
                    self.courseValidValues(data.list);
                    self.isLoading(false);
                })
                .fail(function(xhr) {
                    var errorMsg = "Unknown Error";
                    if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                    self.isLoading(false);

                    if (self.coalesceConfig.showFailureAlerts())
                        self.coalesceConfig.onFailure()(this, "Could not get Valid Values for Course: " + errorMsg);
                })
                .always(function(){
                    self.loadingValidValues--;
                    if (self.loadingValidValues === 0) {
                        if ($.isFunction(callback)) {callback();}
                    }
                });
            }
            
            self.loadStudentValidValues = function(callback) {
                self.loadingValidValues++;
                return $.ajax({
                    method: "GET",
                    url: self.coalesceConfig.baseApiUrl() + "/Student/CustomList?Fields=StudentId,StudentId",
                    xhrFields: { withCredentials: true } })
                .done(function(data) {
                    self.isLoading(true);
                    self.studentValidValues(data.list);
                    self.isLoading(false);
                })
                .fail(function(xhr) {
                    var errorMsg = "Unknown Error";
                    if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                    self.isLoading(false);

                    if (self.coalesceConfig.showFailureAlerts())
                        self.coalesceConfig.onFailure()(this, "Could not get Valid Values for Student: " + errorMsg);
                })
                .always(function(){
                    self.loadingValidValues--;
                    if (self.loadingValidValues === 0) {
                        if ($.isFunction(callback)) {callback();}
                    }
                });
            }
            
            self.showCourseEditor = function(callback: any) {
                if (!self.course()) {
                    self.course(new Course());
                }
                self.course().showEditor(callback)
            };
            self.showStudentEditor = function(callback: any) {
                if (!self.student()) {
                    self.student(new Student());
                }
                self.student().showEditor(callback)
            };

            // Load all child objects that are not loaded.
            self.loadChildren = function(callback) {
                var loadingCount = 0;
                // See if self.course needs to be loaded.
                if (self.course() == null && self.courseId() != null){
                    loadingCount++;
                    var courseObj = new Course();
                    courseObj.load(self.courseId(), function() {
                        loadingCount--;
                        self.course(courseObj);
                        if (loadingCount == 0 && $.isFunction(callback)){
                            callback();
                        }
                    });
                }
                // See if self.student needs to be loaded.
                if (self.student() == null && self.studentId() != null){
                    loadingCount++;
                    var studentObj = new Student();
                    studentObj.load(self.studentId(), function() {
                        loadingCount--;
                        self.student(studentObj);
                        if (loadingCount == 0 && $.isFunction(callback)){
                            callback();
                        }
                    });
                }
                if (loadingCount == 0 && $.isFunction(callback)){
                    callback();
                }
            };


            // Load all the valid values in parallel.
            self.loadValidValues = function(callback) {
                self.loadingValidValues = 0;
                self.loadCourseValidValues(callback);
                self.loadStudentValidValues(callback);
            };

            // Enumeration Lookups.
            self.gradeText = ko.computed(function() {
                for(var i=0;i < self.gradeValues.length; i++){
                    if (self.gradeValues[i].id == self.grade()){
                        return self.gradeValues[i].value;
                    }
                }
            });

            // This stuff needs to be done after everything else is set up.
            // Complex Type Observables

            // Make sure everything is defined before we call this.
            setupSubscriptions();

            if (newItem) {
                if ($.isNumeric(newItem)) self.load(newItem);
                else self.loadFromDto(newItem, true);
            }
        }
    }





    export namespace Enrollment {
        export enum GradeEnum {
            A = 0,
            B = 1,
            C = 2,
            D = 3,
            F = 4,
        };

        // Classes for use in method calls to support data binding for input for arguments
    }
}