
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout List View Model for: Enrollment
// Auto Generated by IntelliTect.Coalesce

var baseUrl = baseUrl || '';

module ListViewModels {

    // Add an enum for all methods that are static and IQueryable
    export enum EnrollmentDataSources {
            Default,
        }
    export class EnrollmentList extends Coalesce.BaseListViewModel<EnrollmentList, ViewModels.Enrollment> {
        protected modelName = "Enrollment";

        protected apiController = "/Enrollment";

        public modelKeyName = "enrollmentId";
        public dataSources = EnrollmentDataSources;
        public itemClass = ViewModels.Enrollment;

        public query: {
            where?: string;
            enrollmentId?:number;
            courseId?:number;
            studentId?:number;
        } = null;

        // The custom code to run in order to pull the initial datasource to use for the collection that should be returned
        public listDataSource: EnrollmentDataSources = EnrollmentDataSources.Default;

        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<EnrollmentList, ViewModels.Enrollment>(Coalesce.GlobalConfiguration.listViewModel);
        public coalesceConfig = new Coalesce.ListViewModelConfiguration<EnrollmentList, ViewModels.Enrollment>(EnrollmentList.coalesceConfig);

        // Valid values
        public courseValidValues: KnockoutObservableArray<any> = ko.observableArray([]);
        public loadCourseValidValues: (callback: any) => void;
        public studentValidValues: KnockoutObservableArray<any> = ko.observableArray([]);
        public loadStudentValidValues: (callback: any) => void;
    
        protected createItem = (newItem?: any, parent?: any) => new ViewModels.Enrollment(newItem, parent);

        constructor() {
            super();
        }
    }

    export namespace EnrollmentList {
        // Classes for use in method calls to support data binding for input for arguments
    }
}