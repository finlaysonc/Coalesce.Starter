
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout View Model for: Blog
// Auto Generated by IntelliTect.Coalesce

module ViewModels {

	export class Blog extends Coalesce.BaseViewModel<Blog>
    {
        protected modelName = "Blog";
        protected primaryKeyName = "blogId";
        protected modelDisplayName = "Blog";

        protected apiController = "/Blog";
        protected viewController = "/Blog";
        public dataSources = ListViewModels.BlogDataSources;


        // The custom code to run in order to pull the initial datasource to use for the object that should be returned
        public dataSource: ListViewModels.BlogDataSources = ListViewModels.BlogDataSources.Default;

        public static coalesceConfig
            = new Coalesce.ViewModelConfiguration<Blog>(Coalesce.GlobalConfiguration.viewModel);
        public coalesceConfig: Coalesce.ViewModelConfiguration<Blog>
            = new Coalesce.ViewModelConfiguration<Blog>(Blog.coalesceConfig);
    
        // Observables
        public blogId: KnockoutObservable<number> = ko.observable(null);
        public name: KnockoutObservable<string> = ko.observable(null);
        public url: KnockoutObservable<string> = ko.observable(null);
        public authorId: KnockoutObservable<number> = ko.observable(null);
        public author: KnockoutObservable<ViewModels.Author> = ko.observable(null);

       
        // Create computeds for display for objects
        public authorText: () => string;
        

                public authorValidValues: KnockoutObservableArray<any> = ko.observableArray([]);
        public loadAuthorValidValues: (callback?: any) => JQueryPromise<any>;
        // Pops up a stock editor for this object.
        public showAuthorEditor: (callback?: any) => void;



        
        public originalData: KnockoutObservable<any> = ko.observable(null);
        
        // This method gets called during the constructor. This allows injecting new methods into the class that use the self variable.
        public init(myself: Blog) {};

        constructor(newItem?: any, parent?: any){
            super();
            var self = this;
            self.parent = parent;
            self.myId;
            // Call an init function that allows for proper inheritance.
            if ($.isFunction(self.init)){
                self.init(self);
            }
            
            ko.validation.init({
                grouping: {
                    deep: true,
                    live: true,
                    observable: true
                }
            });

            // SetupValidation {
			self.authorId = self.authorId.extend({ required: {params: true, message: "Author is required."} });
            
            self.errors = ko.validation.group([
                self.blogId,
                self.name,
                self.url,
                self.authorId,
                self.author,
            ]);
            self.warnings = ko.validation.group([
            ]);

            // Computed Observable for edit URL
            self.editUrl = ko.computed(function() {
                return self.coalesceConfig.baseViewUrl() + self.viewController + "/CreateEdit?id=" + self.blogId();
            });

            // Create computeds for display for objects
			self.authorText = ko.computed(function()
			{   // If the object exists, use the text value. Otherwise show 'None'
				if (self.author() && self.author().authorId()) {
					return self.author().authorId().toString();
				} else {
					return "None";
				}
			});


            // Load the ViewModel object from the DTO. 
            // Force: Will override the check against isLoading that is done to prevent recursion. False is default.
            // AllowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
			self.loadFromDto = function(data: any, force: boolean = false, allowCollectionDeletes: boolean = true) {
				if (!data || (!force && self.isLoading())) return;
				self.isLoading(true);
				// Set the ID 
				self.myId = data.blogId;
				self.blogId(data.blogId);
				// Load the lists of other objects
				// Objects are loaded first so that they are available when the IDs get loaded.
				// This handles the issue with populating select lists with correct data because we now have the object.
				if (!data.author) { 
					if (data.authorId != self.authorId()) {
                        self.author(null);
                    }
                }else {
                    if (!self.author()){
					    self.author(new Author(data.author, self));
				    }else{
					    self.author().loadFromDto(data.author);
				    }
                    if (self.parent && self.parent.myId == self.author().myId && Coalesce.Utilities.getClassName(self.parent) == Coalesce.Utilities.getClassName(self.author()))
                    {
                        self.parent.loadFromDto(data.author, undefined, false);
                    }
                }

				// The rest of the objects are loaded now.
				self.name(data.name);
				self.url(data.url);
				self.authorId(data.authorId);
                if (self.afterLoadFromDto){
                    self.afterLoadFromDto();
                }
				self.isLoading(false);
				self.isDirty(false);
                self.validate();
			};

    	    // Save the object into a DTO
			self.saveToDto = function() {
				var dto: any = {};
				dto.blogId = self.blogId();

    	        dto.name = self.name();
    	        dto.url = self.url();
				dto.authorId = self.authorId();
				if (!dto.authorId && self.author()) {
				    dto.authorId = self.author().authorId();
				}

				return dto;
			}

            // Methods to add to child collections


            // Save on changes
            function setupSubscriptions() {
                self.name.subscribe(self.autoSave);
                self.url.subscribe(self.autoSave);
                self.authorId.subscribe(self.autoSave);
                self.author.subscribe(self.autoSave);
            }  

            // Create variables for ListEditorApiUrls
            // Create loading function for Valid Values

            self.loadAuthorValidValues = function(callback) {
                self.loadingValidValues++;
                return $.ajax({
                    method: "GET",
                    url: self.coalesceConfig.baseApiUrl() + "/Author/CustomList?Fields=AuthorId,AuthorId",
                    xhrFields: { withCredentials: true } })
                .done(function(data) {
                    self.isLoading(true);
                    self.authorValidValues(data.list);
                    self.isLoading(false);
                })
                .fail(function(xhr) {
                    var errorMsg = "Unknown Error";
                    if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                    self.isLoading(false);

                    if (self.coalesceConfig.showFailureAlerts())
                        self.coalesceConfig.onFailure()(this, "Could not get Valid Values for Author: " + errorMsg);
                })
                .always(function(){
                    self.loadingValidValues--;
                    if (self.loadingValidValues === 0) {
                        if ($.isFunction(callback)) {callback();}
                    }
                });
            }
            
            self.showAuthorEditor = function(callback: any) {
                if (!self.author()) {
                    self.author(new Author());
                }
                self.author().showEditor(callback)
            };

            // Load all child objects that are not loaded.
            self.loadChildren = function(callback) {
                var loadingCount = 0;
                // See if self.author needs to be loaded.
                if (self.author() == null && self.authorId() != null){
                    loadingCount++;
                    var authorObj = new Author();
                    authorObj.load(self.authorId(), function() {
                        loadingCount--;
                        self.author(authorObj);
                        if (loadingCount == 0 && $.isFunction(callback)){
                            callback();
                        }
                    });
                }
                if (loadingCount == 0 && $.isFunction(callback)){
                    callback();
                }
            };


            // Load all the valid values in parallel.
            self.loadValidValues = function(callback) {
                self.loadingValidValues = 0;
                self.loadAuthorValidValues(callback);
            };

            // Enumeration Lookups.

            // This stuff needs to be done after everything else is set up.
            // Complex Type Observables

            // Make sure everything is defined before we call this.
            setupSubscriptions();

            if (newItem) {
                if ($.isNumeric(newItem)) self.load(newItem);
                else self.loadFromDto(newItem, true);
            }
        }
    }





    export namespace Blog {

        // Classes for use in method calls to support data binding for input for arguments
    }
}