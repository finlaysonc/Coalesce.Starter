
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout List View Model for: Blog
// Auto Generated by IntelliTect.Coalesce

var baseUrl = baseUrl || '';

module ListViewModels {

    // Add an enum for all methods that are static and IQueryable
    export enum BlogDataSources {
            Default,
        }
    export class BlogList extends Coalesce.BaseListViewModel<BlogList, ViewModels.Blog> {
        protected modelName = "Blog";

        protected apiController = "/Blog";

        public modelKeyName = "blogId";
        public dataSources = BlogDataSources;
        public itemClass = ViewModels.Blog;

        public query: {
            where?: string;
            blogId?:number;
            name?:String;
            url?:String;
            authorId?:number;
        } = null;

        // The custom code to run in order to pull the initial datasource to use for the collection that should be returned
        public listDataSource: BlogDataSources = BlogDataSources.Default;

        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<BlogList, ViewModels.Blog>(Coalesce.GlobalConfiguration.listViewModel);
        public coalesceConfig = new Coalesce.ListViewModelConfiguration<BlogList, ViewModels.Blog>(BlogList.coalesceConfig);

        // Valid values
        public authorValidValues: KnockoutObservableArray<any> = ko.observableArray([]);
        public loadAuthorValidValues: (callback: any) => void;
    
        protected createItem = (newItem?: any, parent?: any) => new ViewModels.Blog(newItem, parent);

        constructor() {
            super();
        }
    }

    export namespace BlogList {
        // Classes for use in method calls to support data binding for input for arguments
    }
}